version June 2022
文責：北沢正清

このreadmeは、
「物理学最前線29：超高温・高密度のクォーク物質〜素粒子の世界の相転移現象〜」（北沢正清、国広悌二）
の挿入図生成に用いたPython3のコードに関する説明と、数値計算全般に関するヒントの走り書きである。
コードは
https://github.com/MasakiyoK/Saizensen/
に置いてある。


■実行環境

これらのコードの実行には、Python3およびパッケージnumpy, scipy, matplotlibが必要(図2.7のみ、更にcartpyが必要)である。実行環境の整備には、Windowsおよびmacではanacondaをインストールするのが容易と思われる。anacondaが入った段階でこれらのパッケージも同時にインストールされる。Linuxなら、OSをインストールした段階でPython3が入っていることが多いので、pip環境でパッケージ整備するのが良かろう。Google Colaboratoryなどのオンライン上の実行環境を使うのもよいかもしれない。


■Python初心者向けの一般的なヒント

・Pythonは「インタプリタ」であり、c言語などのようにコードをコンパイルすることなくそのまま実行する。
  このため手軽に実行できる反面、処理速度はコンパイル言語に比べてはるかに劣る。
  感触としては、標準的な処理においてc/c++言語と比べて10倍以上遅い。

・Pythonでは、コードのブロック（cなどの言語で{ }で囲まれる部分）を字下げ（インデント）によって表現する。
  逆に、字下げにはブロックの指定という明確な意味があるので、適当に字下げしてはいけない。

・Pythonの変数は、基本的にintやdoubleのような「型」を持たない。変数宣言する必要もない。

・ループ処理にはfor命令を使うが、ループはc言語のように数字を増やしてく形式ではなく、配列の要素に対して行われる。「Pythonのループ処理」で検索。

・「内包表記」「ラムダ式」は有用な機能で、本書のコードでも多用されているので、初心者はコードを見る前に検索で調べておくこと。
　特に内包表記は、配列（リスト）の生成やループ処理で頻繁にお世話になる。

・numpyの「スライス」も、特に多次元配列を扱う際に重宝する。


■Pythonを使った数値計算に関する注意

本書のコードでは、各コードで数値計算とグラフ描画がセットで行われているが、これはコード公開の都合上そうしているためで、このようなスタイルが常にお勧めできるわけではない。
例としてグラフ描画の微調整を行うような場合には、都度同じ数値計算を繰り返すと処理時間が掛かってしまうので、計算結果を一旦ファイルに出力した上で、別のコードでグラフ出力するのがよい。

Pythonを使いこなす秘訣は、ネット上で検索しまくることに尽きる。
数値計算で現れる処理の多くはありふれたものであり、誰かによってコードが書かれている。Pythonではそのような多様な処理がパッケージ内の関数として提供されている。目的の処理を実行する関数がその中に存在するならばそれを呼び出せば処理が完了するのだから、問題解決への最短ルートはその関数の名前を知ることに始まる。そして、情報はネット上に溢れている。
現代のプログラミングでは、アルゴリズムを書き下す能力より、検索エンジンを使いこなす能力のほうが重要である、といっても過言ではないかもしれない。
なお、著者（北沢）はプログラミング言語Pythonに関する書籍を購入したことがない。

Pythonのプログラミングでは「ループ(for)を書いたら負け」、という格言をよく目にする。
これは、Pythonではfor文の処理が遅いのと、一見for文が必要になる多くの処理に対してfor文を使わない解決策が準備されているためである。特に配列に対する多くの処理はnumpyの活用によってループなしで書け、その方がコードも処理時間も圧倒的に短くなるし、コードの可読性も上がることが多い。
もちろんループが必要になることはあるし、ループを使えば簡易な実装ができる局面で痩せ我慢して複雑なことをしても仕方ないのだが、特に初心者は「ループを書いたら負け」を意識しながらコードを書くことでPythonらしいコードが早く書けるようになると思う。

numpy, scipy, matplotlibなどのパッケージは、ウェブ上にマニュアルが公開されている。基本的に英語なので日本人にとっては言語の障壁があるものの、パッケージ内の関数や引数の意味、使い方を正しく理解するためにはこれらのマニュアルを参照するのが良い。ソースコードもウェブ上で閲覧できる。ある程度以上の細かい処理が必要になったらこれらの資料を直接参照することをお勧めする。


■数値計算全般に関するヒント

本書ではPythonでプログラミングを行ったが、当然ながら全ての数値計算でPythonが勧められるわけではない。
上でも書いたとおり、Pythonの処理速度はコンパイラ系の言語と比べると圧倒的に遅い。このため、見ている間に計算が終了する程度の処理ならともかく、計算時間が数時間を超えるような場合にはc/c++などの処理速度の速い言語の採用を検討するべきである。その一方で、Pythonにはコード開発が容易という大きな利点があり、多少処理の重い問題でも開発時間の短縮によって問題解決までのトータルコストが減らせるかもしれない。
数値計算の最終目標は科学的な結果を得ることなので、この目的に最短時間で到達できるよう、目的に適した手段を選択すること、そして最適の選択を行うセンスを磨くことが重要である。そのためには、mathematicaなども含めた多様な数値計算の手段を選択肢として身に付けておくことが望ましい。

上でも述べたようにPythonの強力な利点は豊富なパッケージであり、Pythonプログラミングではこれらパッケージを最大限に活用することになる。上ではそのようなスタイルを勧めたが、パッケージをブラックボックスとして使っていると思わぬ勘違いから間違った結果を得てしまうという事態に陥りがちである。
科学数値計算で最もしてはいけないのは、間違った計算結果を世間に発表することである。現代のプログラミングにおいて既存のパーツの活用が必須なのは確かだが、誤った結果を得ないため、それらを完全なブラックボックスとして扱うのではなく、中身をある程度理解したうえで使うことも常に意識しておきたい。パッケージの内部の理解は、問題解決に適したアルゴリズムを選択し、処理を迅速かつ安全に遂行する上でも有用である。
そのためには、マニュアルをきちんと読むことに加え、挙動確認のテスト計算の手間を惜しまないことが重要である。何かの処理を書いたら、パラメータ依存性を調べて自然な結果が得られているかを調べるクセをつけよう。そうすることで、課題そのものに対する深い理解が得られることもよくある。

最後に、著者（北沢）の経験では、数値計算におけるバグやミスを避けるうえで最も大事なのは、計算結果が物理的に妥当であるかを徹底的に吟味・考察することである。コード上のデバッグも重要だが、最後にものをいうのは物理的直感であることを強調しておきたい。

浮動小数点変数には、必ず小数点を付けて整数と区別するクセを付けることをおすすめしたい。

